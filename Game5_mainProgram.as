stop();import com.greensock.*;import com.greensock.easing.*;//---------------------------------------------------------------------------------// the variable for the gamevar numOfFrame:int= 6;var gameMark:Array=new Array();var gameTotalMark:int=0;var gameTimer:Timer=new Timer(1000,120);var gameStart:Boolean = false;var gameLevel:int =0;var targetPositionX:Number = 325;var targetPositionY:Number = 225;var ObjectScaleX:Number =1;var ObjectScaleY:Number =1;var bgSound:Sound;var polarFilmSound:Sound = new polaroidSound();var bgSoundChannel:SoundChannel;var xBorder:Number = 0;var yBorder:Number = 0;var xlimitation:Number = 190;var ylimitation:Number = 120;var totalZoomDistanceX:Number = 0;var totalZoomDistanceY:Number = 0;var bgX_AfterZoom:Number = 325;var bgY_AfterZoom:Number = 225;var changeSignal:int = 0;//var canelZoom:Boolean = false;//-----------------------------------------------------------------------------------//the variable for the movieClipvar mc_polaroidFrameArray:Array;var mcActionArray:Array;var mcWindowArray:Array;var mcActionArrayPlaying:Array = new Array(false,false,false,false,false,false,false);var mcMemoryArrayOrg:Array;var mcMemoryArray:Array;var mcPlayingOnScreen:int=0;var Mc_Bg:MovieClip = new MovieClip();var bgtransform:SoundTransform = new SoundTransform(0.5, 1.0);var intervalVar;var instroIntervalVar;//-------------------------------------------------------------------------------------------------function addArray():void{		if(mc_polaroid == null){		setTimeout(addArray,500);	}	else{			mc_polaroid.gotoAndStop(1);		mc_polaroid.visible = false;		mc_polaroidFrameArray = new Array(mc_polaroid.mc_frame1,mc_polaroid.mc_frame2,mc_polaroid.mc_frame3,mc_polaroid.mc_frame4,mc_polaroid.mc_frame5,mc_polaroid.mc_frame6);		for( var k:int= 0;k<6;k++){		var tempFrameArrayIndex:int = mc_polaroidFrameArray[k].numChildren;			for(var f:int = 0 ; f <tempFrameArrayIndex;f++){				var stringName:String =  mc_polaroidFrameArray[k].getChildAt(f).name;				if(stringName == "screenshotFrame"){				 mc_polaroidFrameArray[k].removeChildAt(f);				}			}		}	}}//------------------------------------------------------------------------------------//the function of the game startProgram(); // before the game start function startProgram(){		stage.focus = stage;	while(gameMark.length > 0){		gameMark.pop();	}		if(gameLevel == 0){		gameTotalMark = 0;		gameLevel = 1;	}	mcMemoryArray = new Array();	mcMemoryArrayOrg = new Array(0,1,2,3,4,5,6,0,1,2,3,4,5,6,0,1,2,3,4,5,6,0,1,2,3,4,5,6,0,1,2,3,4,5,6,0,1,2,3,4,5,6,0,1,2,3,4,5,6,0,1,2,3,4,5,6,0,1,2,3,4,5,6,0,1,2,3,4,5,6,0,1,2,3,4,5,6,0,1,2,3,4,5,6,0,1,2,3,4,5,6,0,1,2,3,4,5,6,0,1,2,3,4,5,6);	//trace("gameLeveL"+ gameLevel);	if(gameLevel == 1){		this.gotoAndStop("levelOne");		bgSound = new Music1();		Mc_Bg = mc_levelOneBg;				mcActionArray = new Array(mc_levelOneBg.a1,mc_levelOneBg.a2,mc_levelOneBg.a3,mc_levelOneBg.a4,mc_levelOneBg.a5,mc_levelOneBg.a6,mc_levelOneBg.a7);		mcWindowArray = new Array(mc_levelOneBg.w1,mc_levelOneBg.w2,mc_levelOneBg.w3,mc_levelOneBg.w4,mc_levelOneBg.w5,mc_levelOneBg.w6,mc_levelOneBg.w7);			}		else if(gameLevel == 2){				this.gotoAndStop("levelTwo");		bgSound = new Music2();		xlimitation = 170;		mc_miniMap.gotoAndStop(2);		mcActionArray = new Array(mc_levelTwoBg.a1,mc_levelTwoBg.a2,mc_levelTwoBg.a3,mc_levelTwoBg.a4,mc_levelTwoBg.a5,mc_levelTwoBg.a6,mc_levelTwoBg.a7);		mcWindowArray = new Array(mc_levelTwoBg.w1,mc_levelTwoBg.w2,mc_levelTwoBg.w3,mc_levelTwoBg.w4,mc_levelTwoBg.w5,mc_levelTwoBg.w6,mc_levelTwoBg.w7);		Mc_Bg = mc_levelTwoBg;		gameTotalMarkChange();			}	else if(gameLevel == 3){					this.gotoAndStop("levelThree");		bgSound = new Music3();		mc_miniMap.gotoAndStop(3);		xlimitation = 270;		mcActionArray = new Array(mc_levelThreeBg.mc_tallHouse.a1,mc_levelThreeBg.mc_shortHouse.a2,mc_levelThreeBg.mc_shortHouse.a3,mc_levelThreeBg.a4,mc_levelThreeBg.mc_tallHouse.a5,mc_levelThreeBg.a6,mc_levelThreeBg.a7);		mcWindowArray = new Array(mc_levelThreeBg.mc_tallHouse.w1,mc_levelThreeBg.mc_shortHouse.w2,mc_levelThreeBg.mc_shortHouse.w3,mc_levelThreeBg.w4,mc_levelThreeBg.mc_tallHouse.w5,mc_levelThreeBg.w6,mc_levelThreeBg.w7);		Mc_Bg =mc_levelThreeBg;		gameTotalMarkChange();			}		Mc_Bg.x = 325;	Mc_Bg.y = 225;			targetPositionX = 325;	targetPositionY = 225;		Mc_Bg.scaleX = 0.66;	Mc_Bg.scaleY = 0.66;		ObjectScaleX =1;	ObjectScaleY =1;	xBorder = 0;	yBorder = 0;	xlimitation = 270;//190	ylimitation = 120;//120	totalZoomDistanceX = 0;	totalZoomDistanceY = 0;	 	gameStart = false;	gameTimer.reset();	numOfFrame= 6;		stopAllMovieClip();		if(mc_polaroid == null){		setTimeout(addArray,500);	}	else{		addArray();	}	var tempLength:int =mc_display.mc_picResult.numChildren;		for (var g:int = 0; g<tempLength ;g++){			var stringFrameName:String =  mc_display.mc_picResult.getChildAt(g).name;			if(stringFrameName == "screenshot"){				 mc_display.mc_picResult.removeChildAt(g);			}	}		while(mcMemoryArrayOrg.length>0) {		var choose = Math.floor(Math.random()*mcMemoryArrayOrg.length);		mcMemoryArray.push(mcMemoryArrayOrg[choose]);		mcMemoryArrayOrg.splice(choose, 1);	}		//stage.addEventListener(MouseEvent.MOUSE_WHEEL,mouseWheelEventHandler);	stage.addEventListener(KeyboardEvent.KEY_DOWN,keyHandlerFunction);	//trace("finish start");}function stopAllMovieClip():void{		for(var k:int=0; k<7;k++){		MovieClip(mcActionArray[k]).gotoAndStop(1);		MovieClip(mcWindowArray[k]).gotoAndStop(1);		}}function gameStartFun():void{	Mouse.hide();	TweenLite.to(Mc_Bg,3,{x:targetPositionX,y:targetPositionY,scaleX:ObjectScaleX,scaleY:ObjectScaleY,ease:Quint.easeInOut,onComplete:init});	}function init() {	stage.focus = stage;	flash.media.SoundMixer.stopAll();	mc_focus.startDrag(true,new Rectangle(152,102,346,245));		gameTimer.addEventListener(TimerEvent.TIMER,timerListener);	gameTimer.start();		stage.addEventListener(Event.ENTER_FRAME,enterFrameEventHander_position);	stage.addEventListener(MouseEvent.CLICK,onClick);	gameStart = true;		bgSoundChannel = bgSound.play();	bgSoundChannel.soundTransform= bgtransform;	bgSoundChannel.addEventListener(Event.SOUND_COMPLETE,loopMusic);		for(var k:int=0; k<7;k++){		MovieClip(mcActionArray[k]).stop();		mcActionArrayPlaying[k] = false;	}		changeSignal  = 0;		mcPlayingOnScreen = 0;		clearInterval(intervalVar);	intervalVar = setInterval(changePlayingAction,100);	}function usedForZoomIn():void{		stage.removeEventListener(Event.ENTER_FRAME,enterFrameEventHander_position);		var orginalX2:Number;	var orginalY2:Number;					var newZoomDistanceX2:Number;	var newZoomDistanceY2:Number;		orginalX2 = bgX_AfterZoom +(325-bgX_AfterZoom)+(mc_focus.x-bgX_AfterZoom)/ObjectScaleX; // the point @ the mc_bg @ scale = 1.0 & mc_bg @ the center	orginalY2 = bgY_AfterZoom +(225-bgY_AfterZoom)+(mc_focus.y-bgY_AfterZoom)/ObjectScaleY; // the point @ the mc_bg @ scale = 1.0 & mc_bg @ the center					ObjectScaleX = int(ObjectScaleX*10+1)/10;	ObjectScaleY = int(ObjectScaleY*10+1)/10;					newZoomDistanceX2= 52*((orginalX2-325)/520);	newZoomDistanceY2 = 34.5*((orginalY2-225)/345);					totalZoomDistanceX = totalZoomDistanceX + newZoomDistanceX2;	totalZoomDistanceY = totalZoomDistanceY + newZoomDistanceY2;					xlimitation = xlimitation + 52;	ylimitation = ylimitation + 34.5;					xBorder =xBorder - newZoomDistanceX2;	yBorder =yBorder - newZoomDistanceY2;					bgX_AfterZoom = targetPositionX -totalZoomDistanceX;	bgY_AfterZoom = targetPositionY -totalZoomDistanceY;					TweenLite.to(Mc_Bg,0.5,{x:targetPositionX-totalZoomDistanceX,y:targetPositionY-totalZoomDistanceY,scaleX:ObjectScaleX, scaleY:ObjectScaleY,onComplete:comepleteZoom});	}function usedForZoomOut():void{		stage.removeEventListener(Event.ENTER_FRAME,enterFrameEventHander_position);		var orginalX2_2:Number;	var orginalY2_2:Number;					var newZoomDistanceX2_2:Number;	var newZoomDistanceY2_2:Number;		orginalX2_2 = bgX_AfterZoom +(325-bgX_AfterZoom)+(mc_focus.x-bgX_AfterZoom)/ObjectScaleX; // the point @ the Mc_Bg @ scale = 1.0 & Mc_Bg @ the center	orginalY2_2 = bgY_AfterZoom +(225-bgY_AfterZoom)+(mc_focus.y-bgY_AfterZoom)/ObjectScaleY; // the point @ the Mc_Bg @ scale = 1.0 & Mc_Bg @ the center					ObjectScaleX = int(ObjectScaleX*10-1)/10;	ObjectScaleY = int(ObjectScaleY*10-1)/10;					newZoomDistanceX2_2 = 52*((orginalX2_2-325)/520);	newZoomDistanceY2_2 = 34.5*((orginalY2_2-225)/345);					totalZoomDistanceX = totalZoomDistanceX - newZoomDistanceX2_2;	totalZoomDistanceY = totalZoomDistanceY - newZoomDistanceY2_2;					xlimitation = xlimitation - 52;	ylimitation = ylimitation - 34.5;					xBorder =xBorder + newZoomDistanceX2_2;	yBorder =yBorder + newZoomDistanceY2_2;					bgX_AfterZoom = targetPositionX-totalZoomDistanceX;	bgY_AfterZoom = targetPositionY-totalZoomDistanceY;					if(Math.abs(xBorder)>Math.abs(xlimitation)){						var distanceDifferentX2:Number = Math.abs(xBorder)-Math.abs(xlimitation);		if(xBorder>0){			distanceDifferentX2 =-distanceDifferentX2;		}		targetPositionX = targetPositionX + distanceDifferentX2;		xBorder = xBorder + distanceDifferentX2 ;		}						if(Math.abs(yBorder)>Math.abs(ylimitation)){							var distanceDifferentY2:Number = Math.abs(yBorder)-Math.abs(ylimitation);		if(yBorder>0){			distanceDifferentY2= -distanceDifferentY2;		}			targetPositionY = targetPositionY+ distanceDifferentY2;			yBorder = yBorder + distanceDifferentY2;		}				TweenLite.to(Mc_Bg,0.5,{x:targetPositionX-totalZoomDistanceX,y:targetPositionY-totalZoomDistanceY,scaleX:ObjectScaleX, scaleY:ObjectScaleY,onComplete:comepleteZoom});	}function usedForResetScale():void{	switch(ObjectScaleX){		case 1:{mc_miniMap.mc_Scale.mc_triangle.x = 227;break;}		case 1.1:{mc_miniMap.mc_Scale.mc_triangle.x = 168;break;}		case 1.2:{mc_miniMap.mc_Scale.mc_triangle.x = 160;break;}		case 1.3:{mc_miniMap.mc_Scale.mc_triangle.x = 122;break;}		case 1.4:{mc_miniMap.mc_Scale.mc_triangle.x = 90;break;}		case 1.5:{mc_miniMap.mc_Scale.mc_triangle.x = 61;break;}		case 1.6:{mc_miniMap.mc_Scale.mc_triangle.x = 30;break;}		case 1.7:{mc_miniMap.mc_Scale.mc_triangle.x = -2;break;}		case 1.8:{mc_miniMap.mc_Scale.mc_triangle.x = -27;break;}		case 1.9:{mc_miniMap.mc_Scale.mc_triangle.x = -55;break;}		case 2.0:{mc_miniMap.mc_Scale.mc_triangle.x = -80;break;}		case 2.1:{mc_miniMap.mc_Scale.mc_triangle.x = -111;break;}		case 2.2:{mc_miniMap.mc_Scale.mc_triangle.x = -144;break;}		};}/*// key , mouse zoom listenerfunction mouseWheelEventHandler(evt:MouseEvent){						if(evt.delta >0 && ObjectScaleX<2.2 && gameStart == true){ //zoom in 				usedForZoomIn();				usedForResetScale();			}			if(evt.delta <0 && ObjectScaleX>1 && gameStart == true){ // zoom out				usedForZoomOut();				usedForResetScale();			}}*/function keyHandlerFunction(keyEvt:KeyboardEvent){			//trace("trigger");						if(keyEvt.keyCode ==38 && ObjectScaleX<2.2 && gameStart == true){ //zoom in 				usedForZoomIn();				usedForResetScale();			}			if(keyEvt.keyCode ==40 && ObjectScaleX>1 && gameStart == true){ // zoom out				usedForZoomOut();				usedForResetScale();			}}function comepleteZoom(){			stage.addEventListener(Event.ENTER_FRAME,enterFrameEventHander_position);		comepleteDrag();}// enterframe listenerfunction enterFrameEventHander_position(evt:Event){//=========================================================================================//for the focus	//upvar tempYCoordinate:Number = 15;var tempXCoordinate:Number = 15;	if(mc_focus.y <= 113 && mc_focus.y >0 && yBorder<ylimitation){//		mc_arrowDown.visible = true;		if((yBorder+15)>ylimitation){			tempYCoordinate = ylimitation-yBorder;			yBorder =ylimitation;		}		else{			tempYCoordinate = 15;			yBorder= yBorder + 15;		}		targetPositionY = targetPositionY + tempYCoordinate;		bgY_AfterZoom = bgY_AfterZoom +tempYCoordinate;		TweenLite.to(Mc_Bg,1,{x:targetPositionX - totalZoomDistanceX,y:targetPositionY -totalZoomDistanceY,scaleX:ObjectScaleX,scaleY:ObjectScaleY,onComplete:comepleteDrag});	}		//down	if(mc_focus.y >= 343 && mc_focus.y <450 && yBorder>-ylimitation){		mc_arrowUp.visible = true;		if((yBorder-15)<-ylimitation){			tempYCoordinate = ylimitation+yBorder;			yBorder =-ylimitation;		}		else{			tempYCoordinate = 15;			yBorder= yBorder - 15;		}		targetPositionY = targetPositionY - tempYCoordinate;		bgY_AfterZoom = bgY_AfterZoom - tempYCoordinate;		TweenLite.to(Mc_Bg,1,{x:targetPositionX -totalZoomDistanceX,y:targetPositionY -totalZoomDistanceY,scaleX:ObjectScaleX,scaleY:ObjectScaleY,onComplete:comepleteDrag});	}		 //right	if(mc_focus.x >= 493 && mc_focus.x <650 && xBorder>-xlimitation){		mc_arrowLeft.visible = true;		if((xBorder-15)<-xlimitation){			tempXCoordinate = xlimitation+xBorder;			xBorder =-xlimitation;		}		else{			tempXCoordinate = 15;			xBorder=xBorder - 15;		}		targetPositionX =targetPositionX - tempXCoordinate;		bgX_AfterZoom = bgX_AfterZoom - tempXCoordinate;		TweenLite.to(Mc_Bg,1,{x:targetPositionX -totalZoomDistanceX,y:targetPositionY -totalZoomDistanceY,scaleX:ObjectScaleX,scaleY:ObjectScaleY,onComplete:comepleteDrag});	}	//left	if(mc_focus.x <=163 && mc_focus.x >0 && xBorder<xlimitation){		mc_arrowRight.visible = true;		if((xBorder+15)>xlimitation){			tempXCoordinate = xlimitation-xBorder;			xBorder =xlimitation;		}		else{			tempXCoordinate = 15;			xBorder=xBorder + 15;		}				targetPositionX =targetPositionX + tempXCoordinate;		bgX_AfterZoom = bgX_AfterZoom + tempXCoordinate;		TweenLite.to(Mc_Bg,1,{x:targetPositionX- totalZoomDistanceX,y:targetPositionY -totalZoomDistanceY,scaleX:ObjectScaleX,scaleY:ObjectScaleY,onComplete:comepleteDrag});	}	var miniFocusPositionX:int = -(Mc_Bg.x - 325)/ObjectScaleX/10.5;	var miniFocusPositionY:int = -(Mc_Bg.y - 225)/ObjectScaleY/8;		if(miniFocusPositionX>0 && miniFocusPositionX>=27){		miniFocusPositionX = 27;	}	if(miniFocusPositionX<0 && miniFocusPositionX<=-27){		miniFocusPositionX = -27;	}	if(miniFocusPositionY>0 && miniFocusPositionY>=17){		miniFocusPositionY = 17;	}	if(miniFocusPositionY<0 && miniFocusPositionY<=-17){		miniFocusPositionY =-17	}	mc_miniMap.mc_miniMap_focus.x =miniFocusPositionX;	mc_miniMap.mc_miniMap_focus.y =miniFocusPositionY;}//--------------------------------------------------------------------------------------------------------------//arrow for complete dragfunction comepleteDrag():void{	if(yBorder>=ylimitation){		mc_arrowUp.visible = false;	}	else{		mc_arrowUp.visible = true;	}	if(yBorder<=-ylimitation){		mc_arrowDown.visible = false;	}	else{		mc_arrowDown.visible = true;	}		if(xBorder>=xlimitation){		mc_arrowLeft.visible = false;	}	else{		mc_arrowLeft.visible = true;	}		if(xBorder<=-xlimitation){		mc_arrowRight.visible = false;	}	else{		mc_arrowRight.visible = true;	}}function changePlayingAction():void{				var playMc:int= mcMemoryArray.shift();			if(mcActionArrayPlaying[playMc] != true){				mcWindowArray[playMc].stop();				mcActionArray[playMc].play();				mcWindowArray[playMc].gotoAndPlay("openWindow");				mcActionArrayPlaying[playMc] = true;				mcPlayingOnScreen = mcPlayingOnScreen+1;				changeSignal  = 0;				}						if(mcPlayingOnScreen>3){				clearInterval(intervalVar);			}					for(var j:int=0;j<7;j++){				if(mcActionArrayPlaying[j] == true){										mcActionArray[j].play();					if(mcWindowArray[j].currentFrame == 1){						mcWindowArray[j].gotoAndPlay("openWindow");					}				}			}}//control the listener function controlListener(startListener:Boolean):void{		if(startListener == true){		mc_focus.visible = true;		mc_miniMap.visible = true;		gameStart =true;		gameTimer.start();		stage.addEventListener(Event.ENTER_FRAME,enterFrameEventHander_position);		stage.addEventListener(MouseEvent.CLICK,onClick);		gameTimer.addEventListener(TimerEvent.TIMER,timerListener);	}	else{		mc_focus.visible = false;		gameStart =false;		gameTimer.removeEventListener(TimerEvent.TIMER,timerListener);		stage.removeEventListener(Event.ENTER_FRAME,enterFrameEventHander_position);		stage.removeEventListener(MouseEvent.CLICK,onClick);	}		if(gameMark.length == 6 && startListener!=false){		gameTimer.stop();		gameTimer.removeEventListener(TimerEvent.TIMER,timerListener);		flash.media.SoundMixer.stopAll();		bgSoundChannel.removeEventListener(Event.SOUND_COMPLETE, loopMusic);		stage.removeEventListener(MouseEvent.CLICK,onClick);		controlListener(false);		gameStart =false;		clearInterval(intervalVar);		this.gotoAndStop("polaroidResult");		gameLevel = gameLevel+ 1;		setEachLevelResult();		mc_polaroid.visible = true;		mc_polaroid.gotoAndPlay(2);	}	}function onClick(evt:MouseEvent){			clearInterval(intervalVar);		polarFilmSound.play();		controlListener(false);		stopOrStartMotion(false);		mc_cameraLighting.gotoAndPlay(2);		mc_miniMap.visible = false;			}function calculate_mark():void{		var tempX:int;				var totalArea_blue:int = 0 ;		var totalArea_red:int = 0 ;		var totalArea_yellow:int = 0 ;		var totalArea_window:int = 0 ;				for(var k:int = 0 ; k<4 ; k++){					if(MovieClip(mcActionArray[k]).mc_yellowArea != null){								var blueRect:Rectangle =new Rectangle();				var blueRectWithWindow:Rectangle =new Rectangle();				var redRect:Rectangle =new Rectangle();				var redRectWithWindow:Rectangle =new Rectangle();				var yellowRect:Rectangle =new Rectangle();				var yellowRectWithWindow:Rectangle =new Rectangle();				var windowRect:Rectangle =new Rectangle();				windowRect =HitArea.intersectionRectangle(mc_focus,mcWindowArray[k]);				blueRect = HitArea.intersectionRectangle(mc_focus,mcActionArray[k].mc_blueArea);				redRect = HitArea.intersectionRectangle(mc_focus,mcActionArray[k].mc_redArea);				yellowRect = HitArea.intersectionRectangle(mc_focus,mcActionArray[k].mc_yellowArea);			// blue							var areaBluePerWindow:int = (blueRect.width*blueRect.height- HitArea.intersectionTwoRectangle(blueRect,windowRect))*0.05;								if(areaBluePerWindow<0){				areaBluePerWindow = 0;				}								totalArea_blue = totalArea_blue + areaBluePerWindow;							//red				var areaRedPerWindow:int = (redRect.width*redRect.height- HitArea.intersectionTwoRectangle(redRect,windowRect))*0.03;								if(areaRedPerWindow<0){				areaRedPerWindow = 0;				}								totalArea_red = totalArea_red + areaRedPerWindow;			//yellow				var areaYellowPerWindow:int = (yellowRect.width*yellowRect.height- HitArea.intersectionTwoRectangle(yellowRect,windowRect))*0.03;				if(areaYellowPerWindow<0){						areaYellowPerWindow = 0;				}								totalArea_yellow = totalArea_yellow + areaYellowPerWindow;			}		}			if(totalArea_red == 0){				tempX =0;			}			else{				tempX= (totalArea_blue+totalArea_red+totalArea_yellow)*0.1/1.7;			}					if(tempX >=100){			tempX = 99;			}						gameTotalMark = gameTotalMark + tempX;						tempX.toString();			gameMark.push(tempX);	}function grabStage() {	numOfFrame = numOfFrame -1;	mc_display.mc_picResult.mc_numFrame.gotoAndStop(numOfFrame+3);				var rectX = mc_focus.x-150;	var rectY = mc_focus.y-100;		mc_focus.visible = false;	mc_arrowUp.visible = false;	mc_arrowRight.visible = false;	mc_arrowLeft.visible = false;	mc_arrowDown.visible = false;	mc_blur.visible = false;	mc_display.visible = false;	mc_clockTimer.visible = false;	mc_miniMap.visible = false;	mc_totalMark3.visible = false;	mc_totalMark2.visible = false;	mc_totalMark1.visible = false;	mc_totalMark0.visible = false;		var matrix:Matrix = new Matrix;  	matrix.translate(-rectX, -rectY);		var bd:BitmapData = new BitmapData(302,202,true);	bd.draw(stage,matrix,null,null,new Rectangle(0,0,302,202));	var screenshot:Bitmap = new Bitmap(bd);	screenshot.x = -127;	screenshot.y = -78.5;				screenshot.width = 252.8;	screenshot.height = 156.3;	screenshot.name = "screenshot";	mc_display.mc_picResult.addChild(screenshot);		calculate_mark();		var screenshot2:Bitmap = new Bitmap(bd);	screenshot2.x = 12.6;	screenshot2.y = 11;				screenshot2.width = 192;	screenshot2.height = 120;	screenshot2.smoothing = true;	screenshot.name = "screenshotFrame";	mc_polaroidFrameArray[5-numOfFrame].addChild(screenshot2);	mc_display.visible = true;	mc_arrowUp.visible = true;	mc_arrowRight.visible = true;	mc_arrowLeft.visible = true;	mc_arrowDown.visible = true;	mc_clockTimer.visible =true;	mc_totalMark3.visible = true;	mc_totalMark2.visible = true;	mc_totalMark1.visible = true;	mc_totalMark0.visible = true;	mc_blur.visible = true;	changeMarkToFrame();	mc_display.gotoAndPlay(2);	}function timerListener(e:TimerEvent):void {		if(mcMemoryArrayOrg.length <5 ){		mcMemoryArrayOrg = new Array(1,0,4,6,2,3,4,2,0,1,6,5,3,2,1,0,3,6,0,3,4,6,0,6,1,6,5,6,2,2,0,1,3,1,0,2,5,6,3,2,3,0,1,4,6,2,1,0,2,3,2,0,4,6,6,4,1,3,1,0,2,3,2,4,5,6,0,1,3);	}		changeSignal = changeSignal +1;		Mouse.hide();		var clockTime:int = gameTimer.currentCount+2;		if(clockTime%2 == 0){			mc_clockTimer.gotoAndStop(clockTime/2);		}				if(changeSignal == 12){			stopOrStartMotion(false);			stopOrStartMotion(true);			changeSignal  = 0;			}		if(gameTimer.currentCount == 120){			gameTimer.stop();			gameTimer.removeEventListener(TimerEvent.TIMER,timerListener);						if(gameMark.length<6){				var len:int = 6-gameMark.length;				for(var k:int=0; k<len;k++){					numOfFrame = numOfFrame -1;					var rectangle:Shape = new Shape; // initializing the variable named rectangle   					rectangle.graphics.beginFill(0xFFFFFF); // choosing the colour for the fill, here it is red   					rectangle.graphics.drawRect(0,0,192,120); // (x spacing, y spacing, width, height)   					rectangle.graphics.endFill();					rectangle.x = 12.6;					rectangle.y = 11;							rectangle.name = "screenshotFrame";					 // not always needed but I like to put it in to end the fill   					mc_polaroidFrameArray[5-numOfFrame].addChild(rectangle); // adds the rectangle to the stage  							gameMark.push(0);					changeMarkToFrame();					setEachLevelResult();				}							}						controlListener(false);			gameStart = false;			gameLevel = gameLevel+ 1;			clearInterval(intervalVar);			this.gotoAndStop("polaroidResult");			mc_polaroid.gotoAndPlay(2);		}}function stopOrStartMotion(action:Boolean):void{		if(action == false){		for(var q:int=0; q<7;q++){				mcActionArray[q].stop();		}		mcPlayingOnScreen = 0;	}	else if (action == true && numOfFrame>0){		for(var p:int=0; p<7;p++){			if(mcActionArrayPlaying[p] == true){					mcActionArrayPlaying[p] = false;					mcWindowArray[p].gotoAndPlay("closeWindow");			}		}			intervalVar = setInterval(changePlayingAction,500);	}}function changeMarkToFrame():void{		var markArray:Array = new Array(mc_display.mc_picResult.mc_frameMark2,mc_display.mc_picResult.mc_frameMark1,mc_display.mc_picResult.mc_frameMark0);	var markFrame_final:Array = new Array(mc_polaroid.mc_frame1,mc_polaroid.mc_frame2,mc_polaroid.mc_frame3,mc_polaroid.mc_frame4,mc_polaroid.mc_frame5,mc_polaroid.mc_frame6);		var whichFrame:int= gameMark.length -1;	var tempMarkForFinal:int = 2;	var tempMark:String = gameMark[whichFrame].toString()+"aaa";		for(var u:int = 0 ; u<3;u++){		var e:String = tempMark.charAt(u);			switch(e){			case "0":{markArray[u].gotoAndStop(3);tempMarkForFinal = 3;break;}			case "1":{markArray[u].gotoAndStop(4);tempMarkForFinal = 4;break;}			case "2":{markArray[u].gotoAndStop(5);tempMarkForFinal = 5;break;}			case "3":{markArray[u].gotoAndStop(6);tempMarkForFinal = 6;break;}			case "4":{markArray[u].gotoAndStop(7);tempMarkForFinal = 7;break;}			case "5":{markArray[u].gotoAndStop(8);tempMarkForFinal = 8;break;}			case "6":{markArray[u].gotoAndStop(9);tempMarkForFinal = 9;break;}			case "7":{markArray[u].gotoAndStop(10);tempMarkForFinal = 10;break;}			case "8":{markArray[u].gotoAndStop(11);tempMarkForFinal = 11;break;}			case "9":{markArray[u].gotoAndStop(12);tempMarkForFinal = 12;break;}			case "a":{markArray[u].gotoAndStop(2);tempMarkForFinal = 2;break;}		};		if( u == 0){			markFrame_final[whichFrame].FrameResult2.gotoAndStop(tempMarkForFinal);		}		else if( u ==1){			markFrame_final[whichFrame].FrameResult1.gotoAndStop(tempMarkForFinal);		}				else if (u ==2){			markFrame_final[whichFrame].FrameResult0.gotoAndStop(tempMarkForFinal);		}	}	gameTotalMarkChange();	}function gameTotalMarkChange():void{		var totalMarkString:String = gameTotalMark.toString() +"aaaa";		for(var u:int = 0 ; u<4;u++){		var t:String = totalMarkString.charAt(u);		var numberMark:int =2;		switch(t){			case "0":{numberMark= 3;break;}			case "1":{numberMark = 4;break;}			case "2":{numberMark = 5;break;}			case "3":{numberMark = 6;break;}			case "4":{numberMark = 7;break;}			case "5":{numberMark = 8;break;}			case "6":{numberMark = 9;break;}			case "7":{numberMark = 10;break;}			case "8":{numberMark = 11;break;}			case "9":{numberMark = 12;break;}			case "a":{numberMark = 2;break;}		};		if( u == 0){			mc_totalMark3.gotoAndStop(numberMark);		}		else if( u ==1){			mc_totalMark2.gotoAndStop(numberMark);		}				else if (u ==2){			mc_totalMark1.gotoAndStop(numberMark);		}		else if (u == 3){			mc_totalMark0.gotoAndStop(numberMark);		}	}	}function setEachLevelResult():void{			var totalMarkString2:String = gameTotalMark.toString() +"aaaa";		for(var u:int = 0 ; u<4;u++){		var t:String = totalMarkString2.charAt(u);		var numberMark2:int =2;		switch(t){			case "0":{numberMark2= 3;break;}			case "1":{numberMark2 = 4;break;}			case "2":{numberMark2 = 5;break;}			case "3":{numberMark2 = 6;break;}			case "4":{numberMark2 = 7;break;}			case "5":{numberMark2 = 8;break;}			case "6":{numberMark2 = 9;break;}			case "7":{numberMark2 = 10;break;}			case "8":{numberMark2 = 11;break;}			case "9":{numberMark2 = 12;break;}			case "a":{numberMark2 = 2;break;}		};		if( u == 0){			mc_polaroid.mc_polarTotalMark.accMark0.gotoAndStop(numberMark2);		}		else if( u ==1){			mc_polaroid.mc_polarTotalMark.accMark1.gotoAndStop(numberMark2);		}				else if (u ==2){			mc_polaroid.mc_polarTotalMark.accMark2.gotoAndStop(numberMark2);		}		else if (u == 3){			mc_polaroid.mc_polarTotalMark.accMark3.gotoAndStop(numberMark2);		}	}}function loopMusic(e:Event):void{	bgSoundChannel.removeEventListener(Event.SOUND_COMPLETE,loopMusic);    if (bgSoundChannel!= null)    {      		bgSoundChannel = bgSound.play();			bgSoundChannel.soundTransform= bgtransform;			bgSoundChannel.addEventListener(Event.SOUND_COMPLETE,loopMusic);    }}